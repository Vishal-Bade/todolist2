"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getValidationResult = exports.useFormValidation = void 0;
var react_1 = require("react");
var custom_1 = require("./custom");
var formContext_1 = require("./formContext");
var primary_1 = require("./primary");
var helper_1 = require("./helper");
function useFormValidation() {
    var context = (0, react_1.useContext)(formContext_1.default);
    return function () {
        var _a;
        var ids = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            ids[_i] = arguments[_i];
        }
        var result = __assign({}, (_a = context === null || context === void 0 ? void 0 : context.validationState) === null || _a === void 0 ? void 0 : _a.validationResults);
        var keys = Object.keys(result);
        if (!ids.length) {
            return { result: result, isValid: (0, helper_1.checkResultIsValid)(result) };
        }
        var filteredResult = keys.reduce(function (prev, current) {
            if (Array.isArray(ids[0])) {
                if (ids[0].includes(current))
                    prev[current] = result[current];
                return prev;
            }
            if (ids.includes(current))
                prev[current] = result[current];
            return prev;
        }, {});
        return {
            result: filteredResult,
            isValid: (0, helper_1.checkResultIsValid)(filteredResult),
        };
    };
}
exports.useFormValidation = useFormValidation;
var getValidationResult = function (value, identity, validation, customValidation, customMessages) {
    var validationResult = [];
    if (validation) {
        var primaryValidationResult = (0, primary_1.checkForPrimaryValidation)(validation, value, identity, customMessages);
        validationResult = validationResult.concat(primaryValidationResult);
    }
    if (customValidation) {
        var customValidationResult = (0, custom_1.checkForCustomValidation)(customValidation, value, identity);
        validationResult = validationResult.concat(customValidationResult);
    }
    return validationResult;
};
exports.getValidationResult = getValidationResult;
