"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkForPrimaryValidation = void 0;
var helper_1 = require("./helper");
var pipeline_1 = require("./pipeline");
var checkForPrimaryValidation = function (validateObject, value, identity, customMessages) {
    var _a;
    var validateKeys = Object.keys(validateObject);
    var trimedValue = Array.isArray(value)
        ? value.map(function (val) { return val.trim(); })
        : value.toString().trim();
    if (validateKeys.find(function (key) { return key === "required"; })) {
        var req = validateObject["required"];
        var msg = (_a = req.msg) !== null && _a !== void 0 ? _a : ((customMessages === null || customMessages === void 0 ? void 0 : customMessages.required)
            ? (0, helper_1.resolveMsg)(customMessages === null || customMessages === void 0 ? void 0 : customMessages.required, identity, (0, helper_1.getValue)(validateObject["required"]))
            : identity + " field value is required");
        if (Array.isArray(trimedValue)) {
            if (trimedValue.length < 1 || !trimedValue.some(function (v) { return !!v; })) {
                return [
                    {
                        msg: msg,
                    },
                ];
            }
        }
        if (trimedValue === "" || !trimedValue)
            return [
                {
                    msg: msg,
                },
            ];
    }
    var refValidatePipeLine = pipeline_1.default;
    if (typeof customMessages !== "undefined") {
        refValidatePipeLine = pipeline_1.default.map(function (validatePipe) {
            if (typeof customMessages[validatePipe.case] !== "string")
                return validatePipe;
            validatePipe.defaultMsg = customMessages[validatePipe.case];
            return validatePipe;
        });
    }
    return validateReducer(refValidatePipeLine, identity, trimedValue, validateObject);
};
exports.checkForPrimaryValidation = checkForPrimaryValidation;
var validateReducer = function (validateCases, identity, value, validateObject) {
    var validateKeys = Object.keys(validateObject);
    return validateKeys.reduce(function (validationResult, key) {
        var validate = validateObject[key];
        var validateCase = validateCases.find(function (v) { return v.case === key; });
        if (validateCase) {
            return ResolveValidateCase(validationResult, validateCase, validate)(value, identity);
        }
        return validationResult;
    }, []);
};
var ResolveValidateCase = function (validationResult, validateCase, validate) {
    var pattern = validateCase.pattern, defaultMsg = validateCase.defaultMsg;
    return function (value, identity) {
        var _a, _b, _c, _d, _e;
        var result = true;
        if (!pattern)
            return validationResult;
        var msgValue = (0, helper_1.getValue)(validate);
        if (pattern.is || pattern.not) {
            if (Array.isArray(value)) {
                result = value.every(function (v) {
                    var _a, _b, _c, _d, _e;
                    if (((_a = pattern.is) === null || _a === void 0 ? void 0 : _a.regex) || ((_b = pattern.not) === null || _b === void 0 ? void 0 : _b.regex)) {
                        return ((_c = pattern.is) === null || _c === void 0 ? void 0 : _c.regex)
                            ? new RegExp(pattern.is.regex.value, pattern.is.regex.flag).test(v)
                            : !new RegExp(pattern.not.regex.value, pattern.not.regex.flag).test(v);
                    }
                    return ((_d = pattern.is) === null || _d === void 0 ? void 0 : _d.value)
                        ? pattern.is.value === v
                        : ((_e = pattern.not) === null || _e === void 0 ? void 0 : _e.value) !== v;
                });
            }
            else {
                if (((_a = pattern.is) === null || _a === void 0 ? void 0 : _a.regex) || ((_b = pattern.not) === null || _b === void 0 ? void 0 : _b.regex)) {
                    result = ((_c = pattern.is) === null || _c === void 0 ? void 0 : _c.regex)
                        ? new RegExp(pattern.is.regex.value, pattern.is.regex.flag).test(value)
                        : !new RegExp(pattern.not.regex.value, pattern.not.regex.flag).test(value);
                }
                else {
                    result = ((_d = pattern.is) === null || _d === void 0 ? void 0 : _d.value)
                        ? pattern.is.value === value
                        : ((_e = pattern.not) === null || _e === void 0 ? void 0 : _e.value) !== value;
                }
            }
        }
        if (pattern.len || pattern.num) {
            if (Array.isArray(value)) {
                result = value.every(function (v) {
                    if (pattern.len)
                        return pattern.len.greater
                            ? v.length > +msgValue
                            : v.length < +msgValue;
                    return pattern.num.greater ? +v > +msgValue : +v < +msgValue;
                });
            }
            else {
                if (pattern.len) {
                    result = pattern.len.greater
                        ? value.length < +msgValue
                        : value.length > +msgValue;
                }
                else {
                    result = pattern.num.greater
                        ? +value < +msgValue
                        : +value > +msgValue;
                }
            }
        }
        if (!result)
            validationResult.push({
                msg: (0, helper_1.addPrimaryMsg)(validate, (0, helper_1.resolveMsg)(defaultMsg, identity, msgValue)),
            });
        return validationResult;
    };
};
